#!/usr/bin/env python3

from urllib.parse import urljoin
from requests_toolbelt import MultipartEncoder

import os
import json
import requests
import sys

MAX_RETRIES = 5

def eprint(*args, **kwargs):
    print(*args, file=sys.stderr, **kwargs)


class ApiError(Exception):
    def __init__(self, response):
        self.response = response

    def repr(self):
        return {
            'url': self.response.url,
            'status_code': self.response.status_code,
            'details': self.response.text
        }

    def __str__(self):
        return json.dumps(self.repr(), indent=4)


class NamedFilePart:
    def __init__(self, object_name, filename, mimetype='application/octet-stream'):
        self.object_name = object_name
        self.filename = os.path.basename(filename)
        self._local_filename = os.path.expanduser(filename)
        self.mimetype = mimetype
        self._size = None
        self._handler = None
    
    @property
    def size(self):
        if self._size is None:
            self._size = os.stat(self._local_filename).st_size
        return self._size

    @property
    def handler(self):
        if self._handler is None:
            self._handler = open(self._local_filename, 'rb')
        return self._handler


def create_token(args):
    url = urljoin(args.api_url, '/jwt/signin')
    password = args.password_file.read().strip()

    headers = {'Content-Type': 'application/json'}

    data = {'username': args.username, 'password': password}
    body = json.dumps(data)

    retries = args.network_retries
    while retries > 0:
        try:
            response = requests.post(url, headers=headers, data=body)
            if response.status_code != 200:
                raise ApiError(response)
        except requests.exceptions.Timeout:
            retries -= 1
        else:
            print(response.json())
            return


def upload_command(args):
    url = urljoin(args.api_url, '/api/v1/upload/' + args.channel)
    files = (
        NamedFilePart('image', args.image),
        NamedFilePart('checksum', args.checksum)
    )

    upload_files = {}
    for file_part in files:
        upload_files[file_part.object_name] = (file_part.filename, file_part.handler, file_part.mimetype)
    m = MultipartEncoder(fields=upload_files)

    headers = {
        'Authorization': 'Bearer ' + args.token,
        'Content-Type': m.content_type
    }

    retries = args.network_retries
    while retries > 0:
        try:
            response = requests.post(url, headers=headers, data=m)
            if response.status_code != 200:
                raise ApiError(response)
        except requests.exceptions.Timeout:
            retries -= 1
        else:
            return


if __name__ == '__main__':
    import argparse
    import traceback

    progname = os.path.basename(sys.argv[0])

    parser = argparse.ArgumentParser(prog=progname)

    subparsers = parser.add_subparsers(title='subcommands',
                                       dest='subparser_name',
                                       description='valid subcommands',
                                       help='additional help')

    token_parser = subparsers.add_parser('create-token', help='Authenticate with the server')
    token_parser.add_argument('--api-url', required=True, help='remote image manager URL')
    token_parser.add_argument('--network-retries', default=MAX_RETRIES, metavar='N',
                              help='specifies how many times the operation ' \
                                   'should be retried upon error')
    token_parser.add_argument('username', help='User name')
    token_parser.add_argument('password_file', nargs='?', type=argparse.FileType('r'), default=sys.stdin, help='User name')
    token_parser.set_defaults(func=create_token)

    upload_parser = subparsers.add_parser('upload', help='Upload image')
    upload_parser.add_argument('--api-url', required=True, help='remote image manager URL')
    upload_parser.add_argument('--network-retries', default=MAX_RETRIES, metavar='N',
                               help='specifies how many times the operation ' \
                                    'should be retried upon error')
    upload_parser.add_argument('--token', required=True, help='authentication token')
    upload_parser.add_argument('--channel', required=True, help='channel name')
    upload_parser.add_argument('--image', required=True, help='image file name')
    upload_parser.add_argument('--checksum', required=True, help='sha256 checksum')
    upload_parser.add_argument('--arch', help='architecture')
    upload_parser.add_argument('--version', help='version')
    upload_parser.set_defaults(func=upload_command)

    args = parser.parse_args()

    if not args.subparser_name:
        print("No subcommand specified, see --help for usage")
        exit(1)

    try:
        args.func(args)
    except ApiError as e:
        eprint(str(e))
    except requests.exceptions.RequestException as e:
        print(e.args[0].args[1])
        exit(1)
    except:
        ei = sys.exc_info()
        eprint("Unexpected %s exception in %s: %s" % (ei[0].__name__, args.subparser_name, ei[1]))
        eprint(traceback.format_exc())
